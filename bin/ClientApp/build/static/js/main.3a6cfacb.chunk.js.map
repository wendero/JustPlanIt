{"version":3,"sources":["components/NavMenu.js","components/Layout.js","components/Loading.js","components/Home.js","components/Room.js","App.js","registerServiceWorker.js","index.js"],"names":["NavMenu","props","toggleNavbar","bind","state","collapsed","this","setState","Navbar","className","light","Container","NavbarBrand","tag","Link","to","NavbarToggler","onClick","Component","displayName","name","Layout","children","FillOver","React","Loading","Home","room","roomId","redirect","data","loaded","OnRoomChange","event","target","value","OnNameChange","CreateRoom","a","requestOptions","method","headers","body","JSON","stringify","fetch","response","json","identifier","memberId","members","JoinRoom","url","status","message","alert","type","CheckCreateButton","RenderRedirect","pathname","componentWillMount","match","params","console","log","componentDidMount","Row","Col","Card","CardHeader","CardBody","Input","placeholder","onChange","Button","disabled","Room","timer","leader","voting","adding","window","location","href","replace","loadData","closing","results","clearInterval","filter","f","votingStory","stories","resultStory","length","showResults","storyId","story","result","onAddNewStoryKeyDown","keyCode","Title","setInterval","closeRoom","history","push","render","amILeader","title","md","size","deck","map","item","index","key","ListGroup","ListGroupItem","onKeyDown","readOnly","color","Results","componentWillReceiveProps","pointsChanged","points","setPoints","Points","Number","Status","average","maximum","maximumMembers","Badge","minimum","minimumMembers","InputGroup","defaultValue","InputGroupAddon","addonType","ScrumCard","vote","MemberId","votes","Team","finishVoting","cancelVoting","quantityOfVotes","Object","keys","style","borderBottom","outline","Story","getStatus","label","changeStatus","deleteStory","startVoting","App","exact","path","component","isLocalhost","Boolean","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","baseUrl","document","getElementsByTagName","getAttribute","rootElement","getElementById","ReactDOM","basename","URL","process","origin","addEventListener","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.3a6cfacb.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Collapse, Container, Navbar, NavbarBrand, NavbarToggler, NavItem, NavLink } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport './NavMenu.css';\r\n\r\nexport class NavMenu extends Component {\r\n  static displayName = NavMenu.name;\r\n\r\n  constructor (props) {\r\n    super(props);\r\n\r\n    this.toggleNavbar = this.toggleNavbar.bind(this);\r\n    this.state = {\r\n      collapsed: true\r\n    };\r\n  }\r\n\r\n  toggleNavbar () {\r\n    this.setState({\r\n      collapsed: !this.state.collapsed\r\n    });\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <header>\r\n        <Navbar className=\"navbar-expand-sm navbar-toggleable-sm ng-white border-bottom box-shadow mb-3\" light>\r\n          <Container>\r\n            <NavbarBrand tag={Link} to=\"/\">JustPlanIt</NavbarBrand>\r\n            <NavbarToggler onClick={this.toggleNavbar} className=\"mr-2\" />\r\n            {/* <Collapse className=\"d-sm-inline-flex flex-sm-row-reverse\" isOpen={!this.state.collapsed} navbar>\r\n              <ul className=\"navbar-nav flex-grow\">\r\n                <NavItem>\r\n                  <NavLink tag={Link} className=\"text-dark\" to=\"/\">Home</NavLink>\r\n                </NavItem>\r\n                <NavItem>\r\n                  <NavLink tag={Link} className=\"text-dark\" to=\"/counter\">Counter</NavLink>\r\n                </NavItem>\r\n                <NavItem>\r\n                  <NavLink tag={Link} className=\"text-dark\" to=\"/fetch-data\">Fetch data</NavLink>\r\n                </NavItem>\r\n              </ul>\r\n            </Collapse> */}\r\n          </Container>\r\n        </Navbar>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Container } from 'reactstrap';\r\nimport { NavMenu } from './NavMenu';\r\n\r\nexport class Layout extends Component {\r\n  static displayName = Layout.name;\r\n\r\n  render () {\r\n    return (\r\n      <div>\r\n        <NavMenu />\r\n        <Container>\r\n          {this.props.children}\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nclass FillOver extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"fillover\"><div>{this.props.children}</div></div>\r\n        )\r\n    }\r\n}\r\nexport class Loading extends React.Component {\r\n    render() {\r\n        return (\r\n            <FillOver><div className=\"box\"><i className=\"fal fa-spinner font-3x fa-spin\"></i>{this.props.children}</div></FillOver>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Row, Col, Card, CardHeader, CardBody, Input, Button } from 'reactstrap';\r\nimport { Redirect } from 'react-router-dom'\r\nimport { Loading } from './Loading'\r\n\r\nexport class Home extends Component {\r\n  static displayName = Home.name;\r\n\r\n\r\n  state = {\r\n    room: '',\r\n    roomId: null,\r\n    name: '',\r\n    redirect: false,\r\n    data: null,\r\n    loaded: null\r\n  }\r\n\r\n  OnRoomChange = (event) => {\r\n    this.setState({\r\n      ...this.state,\r\n      room: event.target.value\r\n    })\r\n  }\r\n  OnNameChange = (event) => {\r\n    this.setState({\r\n      ...this.state,\r\n      name: event.target.value\r\n    })\r\n  }\r\n\r\n  CreateRoom = async (event) => {\r\n    const url = `api/room/`\r\n\r\n    const requestOptions = {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ room: this.state.room, name: this.state.name })\r\n    };\r\n\r\n    const response = await fetch(url, requestOptions);\r\n    const data = await response.json();\r\n\r\n    await this.setState({\r\n      ...this.state,\r\n      data: data,\r\n    })\r\n    const roomId = data.identifier;\r\n    const memberId = data.members[0].identifier;\r\n\r\n    this.setState({\r\n      ...this.state,\r\n      redirect: `/room/${roomId}/${memberId}`\r\n    });\r\n  }\r\n  JoinRoom = async (event) => {\r\n    const { roomId, name } = this.state\r\n    const url = `api/room/${roomId}/join`\r\n\r\n    const requestOptions = {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ name: name })\r\n    };\r\n\r\n    const response = await fetch(url, requestOptions);\r\n    const data = await response.json();\r\n    if(response.status == 404)\r\n    {\r\n      var message = data.message\r\n      if(!message) {\r\n        message = \"Joining failed\"\r\n      }\r\n\r\n      this.setState({\r\n        ...this.state,\r\n        alert: {\r\n          message: message,\r\n          type: 'danger'\r\n        }\r\n      })\r\n    }\r\n\r\n    const memberId = data.identifier;\r\n\r\n    this.setState({\r\n      ...this.state,\r\n      redirect: `/room/${roomId}/${memberId}`\r\n    });\r\n  }\r\n  CheckCreateButton = () => {\r\n    return this.state.name == '' || this.state.room == '';\r\n  }\r\n\r\n  RenderRedirect = () => {\r\n    if (this.state.redirect) {\r\n      return <Redirect to={{ pathname: this.state.redirect, data: this.state.data }} />\r\n    }\r\n  }\r\n  componentWillMount = async () => {\r\n    const { roomId } = this.props.match.params\r\n    if (roomId) {\r\n      const response = await fetch(`api/room/${roomId}`);\r\n      console.log(response)\r\n      const data = await response.json();\r\n      console.log(data)\r\n\r\n      this.setState({\r\n        ...this.state,\r\n        roomId: roomId,\r\n        room: data.name,\r\n      })\r\n    }\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    this.setState({\r\n      ...this.state,\r\n      loaded: true\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { loaded } = this.state\r\n    return (\r\n      <div>\r\n        {!loaded ? <Loading /> : (\r\n          <Row>\r\n            {this.RenderRedirect()}\r\n            <Col>\r\n              <Card>\r\n                <CardHeader>{this.state.roomId ? 'Join session' : 'New session'}</CardHeader>\r\n                <CardBody>\r\n                  {this.state.roomId ? (\r\n                    <h5>{this.state.room}</h5>\r\n                  ) : (\r\n                      <Input type=\"text\" value={this.state.room} placeholder=\"room name\" onChange={this.OnRoomChange}></Input>\r\n                    )}\r\n                  <Input type=\"text\" value={this.state.name} placeholder=\"your name\" className=\"mt-2 mb-2\" onChange={this.OnNameChange}></Input>\r\n                  {this.state.roomId ? (\r\n                    <Button className=\"btn btn-primary btn-block\" disabled={this.CheckCreateButton()} onClick={this.JoinRoom}>Join</Button>\r\n                  ) : (\r\n                      <Button className=\"btn btn-primary btn-block\" disabled={this.CheckCreateButton()} onClick={this.CreateRoom}>Create</Button>\r\n                    )}\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n            <Col></Col>\r\n          </Row>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Row, Col, Card, CardHeader, CardBody, Input, ListGroup, ListGroupItem, Badge, Button, InputGroupAddon, InputGroup } from 'reactstrap'\r\nimport { Loading } from \"./Loading\"\r\n\r\nexport class Room extends Component {\r\n  timer = null\r\n\r\n  state = {\r\n    data: null,\r\n    roomId: 0,\r\n    memberId: 0,\r\n    leader: false,\r\n    voting: false,\r\n    adding: false,\r\n    url: null,\r\n  }\r\n\r\n  componentWillMount = async () => {\r\n    const { roomId, memberId } = this.props.match.params\r\n    const url = `${window.location.href.replace(window.location.pathname, '')}/room/${roomId}`\r\n\r\n    await this.setState({\r\n      ...this.state,\r\n      memberId: memberId,\r\n      roomId: roomId,\r\n      url: url,\r\n    })\r\n\r\n    this.loadData()\r\n  }\r\n  loadData = async () => {\r\n    const { roomId, memberId, closing, results } = this.state\r\n    if (closing) {\r\n      clearInterval(this.timer)\r\n      return\r\n    }\r\n\r\n    const response = await fetch(`api/room/${roomId}`)\r\n    const data = await response.json()\r\n    const leader = data.members.filter(f => f.leader)\r\n    const votingStory = data.stories.filter(f => f.status == 2)\r\n    const resultStory = data.stories.filter(f => f.status == 4)\r\n\r\n    await this.setState({\r\n      ...this.state,\r\n      memberId: memberId,\r\n      roomId: roomId,\r\n      data: data,\r\n      leader: leader ? leader[0].identifier : null,\r\n      voting: votingStory != null ? votingStory[0] : false,\r\n    })\r\n\r\n    if (resultStory != null && resultStory.length > 0) {\r\n      if (!results) {\r\n        await this.showResults(resultStory[0].identifier)\r\n      }\r\n    }\r\n    else {\r\n      await this.setState({\r\n        ...this.state,\r\n        results: null,\r\n      })\r\n    }\r\n  }\r\n\r\n  showResults = async (storyId) => {\r\n    const { roomId, results } = this.state\r\n\r\n    if (results && results.story.identifier == storyId)\r\n      return\r\n\r\n    const url = `api/room/${roomId}/vote/${storyId}/results/`\r\n\r\n    const response = await fetch(url)\r\n    const result = await response.json()\r\n\r\n    this.setState({\r\n      ...this.state,\r\n      results: result\r\n    })\r\n  }\r\n\r\n  onAddNewStoryKeyDown = async (event) => {\r\n    if (event.keyCode == 13) {\r\n      const { roomId } = this.state\r\n      const url = `api/room/${roomId}/story`\r\n      const value = event.target.value\r\n\r\n      event.target.value = ''\r\n\r\n      const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ Title: value })\r\n      }\r\n\r\n      await fetch(url, requestOptions)\r\n    }\r\n  }\r\n  componentDidMount = () => {\r\n    this.timer = setInterval(() => {\r\n      this.loadData()\r\n    }, 1000)\r\n  }\r\n  closeRoom = async () => {\r\n    const { roomId } = this.state\r\n    this.setState({\r\n      ...this.state,\r\n      closing: true\r\n    })\r\n    const url = `api/room/${roomId}`\r\n\r\n    const requestOptions = {\r\n      method: 'DELETE',\r\n    }\r\n    const response = await fetch(url, requestOptions)\r\n\r\n    if (response.status == 200) {\r\n      this.props.history.push('/')\r\n    }\r\n  }\r\n\r\n  render = () => {\r\n    const { data, leader, memberId, voting, results } = this.state\r\n    const amILeader = leader == memberId\r\n\r\n    return (\r\n      <div>\r\n        {!data ? <Loading /> : (\r\n          <div>\r\n            <h1>{data.name}</h1>\r\n            {voting ? <h3 className=\"bg-info rounded p-2 color-white\">{voting.title}</h3> : results ? <h3 className=\"bg-success rounded p-2 color-white\">{results.story.title}</h3> : <h3 className=\"p-2\">&nbsp;</h3>}\r\n            <Row>\r\n              <Col md={{ size: 9 }}>\r\n                {!results ? (\r\n                  <div>\r\n                    {\r\n                      data.deck.map((item, index) => {\r\n                        return (\r\n                          <ScrumCard key={index} state={this.state} item={item} index={index} />\r\n                        )\r\n                      })\r\n                    }\r\n                  </div>\r\n                ) : (\r\n                    <Results state={this.state} />\r\n                  )}\r\n                <div className=\"mt-3\">\r\n                  <h3>Stories</h3>\r\n                  <ListGroup className=\"block\">\r\n                    {amILeader ? (\r\n                      <ListGroupItem>\r\n                        <Row>\r\n                          <Col>\r\n                            <Input placeholder=\"add new story\" onKeyDown={this.onAddNewStoryKeyDown}></Input>\r\n                          </Col>\r\n                        </Row>\r\n                      </ListGroupItem>\r\n                    ) : null}\r\n                    {\r\n                      data.stories.map((item, index) => {\r\n                        return (\r\n                          <Story key={index} state={this.state} item={item} />\r\n                        )\r\n                      })\r\n                    }\r\n                  </ListGroup>\r\n                </div>\r\n              </Col>\r\n              <Col md={{ size: 3 }}>\r\n                <Team state={this.state} />\r\n                <Card className=\"no-border shadow mt-3\">\r\n                  <CardBody className=\"no-border\">\r\n                    <h5>Invite your teammates</h5>\r\n                    <Input readOnly value={this.state.url} />\r\n                  </CardBody>\r\n                </Card>\r\n\r\n                {amILeader ? (\r\n                  <Card className=\"no-border shadow mt-3\">\r\n                    <CardBody className=\"no-border\">\r\n                      <Button color=\"danger\" className=\"btn-block\" onClick={this.closeRoom}>Close room</Button>\r\n                    </CardBody>\r\n                  </Card>\r\n                ) : (null)}\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n        )\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass Results extends React.Component {\r\n  componentWillMount = () => {\r\n    this.setState(this.props.state)\r\n  }\r\n\r\n  componentWillReceiveProps = () => {\r\n    this.setState(this.props.state)\r\n  }\r\n\r\n  pointsChanged = (event) => {\r\n    const points = event.target.value\r\n\r\n    this.setState({\r\n      ...this.state,\r\n      points: points\r\n    })\r\n  }\r\n\r\n  setPoints = async (storyId, event) => {\r\n    const { roomId, points } = this.state\r\n    const url = `api/room/${roomId}/story/${storyId}`\r\n\r\n    const requestOptions = {\r\n      method: 'PATCH',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({\r\n        Points: Number(points),\r\n        Status: 3\r\n      })\r\n    }\r\n    await fetch(url, requestOptions)\r\n  }\r\n\r\n  render = () => {\r\n    const { results, memberId, leader } = this.state\r\n    const amILeader = leader == memberId\r\n    const points = results && results.story.points > 0 ? results.story.points : ''\r\n\r\n    return (\r\n      <div>\r\n        {!results ? null : (\r\n          <div>\r\n            <Row>\r\n              <Col className=\"text-center d-flex align-items-stretch\">\r\n                <Card className=\"full-width\">\r\n                  <CardHeader className=\"back-green-important bold\">\r\n                    Average\r\n                  </CardHeader>\r\n                  <CardBody className=\"h-100\">\r\n                    <div className=\"font-5x bold\">{results.average}</div>\r\n                  </CardBody>\r\n                </Card>\r\n              </Col>\r\n              <Col className=\"text-center d-flex align-items-stretch\">\r\n                <Card className=\"full-width\">\r\n                  <CardHeader className=\"back-yellow-important bold\">Maximum</CardHeader>\r\n                  <CardBody>\r\n                    <div className=\"font-5x bold\">{results.maximum}</div>\r\n                    {results.maximumMembers.map((item, index) => {\r\n                      return (\r\n                        <Badge key={index} color=\"primary\" className=\"mr-1\">{item.name}</Badge>\r\n                      )\r\n                    })}\r\n                  </CardBody>\r\n                </Card>\r\n              </Col>\r\n              <Col className=\"text-center d-flex align-items-stretch\">\r\n                <Card className=\"full-width\">\r\n                  <CardHeader className=\"back-info-important bold\">Minimum</CardHeader>\r\n                  <CardBody>\r\n                    <div className=\"font-5x bold\">{results.minimum}</div>\r\n                    {results.minimumMembers.map((item, index) => {\r\n                      return (\r\n                        <Badge key={index} color=\"primary\" className=\"mr-1\">{item.name}</Badge>\r\n                      )\r\n                    })}\r\n                  </CardBody>\r\n                </Card>\r\n              </Col>\r\n            </Row>\r\n            {amILeader ? (\r\n              <Row className=\"mt-3\">\r\n                <Col>\r\n                  <InputGroup>\r\n                    <Input defaultValue={points} onChange={this.pointsChanged} placeholder=\"How many points for this story?\" />\r\n                    <InputGroupAddon addonType=\"append\"><Button color=\"primary\" onClick={this.setPoints.bind(this, results.story.identifier)}>Set</Button></InputGroupAddon>\r\n                  </InputGroup>\r\n                </Col>\r\n                <Col>\r\n                </Col>\r\n              </Row>) : (\r\n                null\r\n              )}\r\n          </div>\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass ScrumCard extends React.Component {\r\n\r\n  vote = async (points) => {\r\n    const { roomId, memberId } = this.state\r\n    const storyId = this.state.voting.identifier\r\n    const url = `api/room/${roomId}/vote/${storyId}`\r\n\r\n    const requestOptions = {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ MemberId: Number(memberId), Points: points })\r\n    }\r\n\r\n    fetch(url, requestOptions)\r\n  }\r\n\r\n  componentWillMount = () => {\r\n    this.setState(this.props.state)\r\n  }\r\n\r\n  componentWillReceiveProps = () => {\r\n    this.setState(this.props.state)\r\n  }\r\n\r\n  render = () => {\r\n    const { item } = this.props\r\n    const { voting, memberId } = this.state\r\n\r\n    return (\r\n      <div className={`scrumCard shadow ${voting && voting.votes[memberId] && voting.votes[memberId] == item ? 'back-blue-important' : 'back-white'} rounded ${voting ? 'voting hover-teal-important' : 'disabled'}`} onClick={this.vote.bind(this, item)}>\r\n        <div className=\"border-clouds border-1 no-margin no-padding full-height rounded\">{item}</div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nclass Team extends React.Component {\r\n\r\n  componentWillMount = () => {\r\n    this.setState(this.props.state)\r\n  }\r\n\r\n  componentWillReceiveProps = () => {\r\n    this.setState(this.props.state)\r\n  }\r\n\r\n  finishVoting = async () => {\r\n    const { roomId } = this.state\r\n    const url = `api/room/${roomId}/vote/stop`\r\n\r\n    const requestOptions = {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n    }\r\n    const response = await fetch(url, requestOptions)\r\n    const results = await response.json()\r\n\r\n    this.setState({\r\n      ...this.state,\r\n      results: results,\r\n      points: null\r\n    })\r\n  }\r\n\r\n  cancelVoting = (storyId, status) => {\r\n    const { roomId } = this.state\r\n    const url = `api/room/${roomId}/story/${storyId}`\r\n\r\n    const requestOptions = {\r\n      method: 'PATCH',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ status: status })\r\n    }\r\n    fetch(url, requestOptions)\r\n  }\r\n\r\n  render = () => {\r\n    const { data, leader, memberId, voting } = this.state\r\n    const amILeader = leader == memberId\r\n    const quantityOfVotes = voting ? Object.keys(voting.votes).length : 0\r\n\r\n    return (\r\n      <Card className=\"no-border shadow\">\r\n        <CardHeader className=\"border-none h3 back-blue-important\">\r\n          Team\r\n        </CardHeader>\r\n        <CardBody className=\"no-border no-padding\">\r\n          <ListGroup>\r\n            {\r\n              data.members.map((item, index) => {\r\n                return (\r\n                  <ListGroupItem key={item.identifier} className=\"\" style={{ borderBottom: '1px solid lightgray' }}>\r\n                    <h6>{item.name}</h6>\r\n                    {leader == item.identifier ? <Badge color=\"danger\" className=\"mr-1\">leader</Badge> : (null)}\r\n                    {memberId == item.identifier ? <Badge color=\"primary\" className=\"mr-1\">you</Badge> : (null)}\r\n                    {voting && (!voting.votes || !voting.votes[`${item.identifier}`]) ? <Badge color=\"warning\">waiting</Badge> : (null)}\r\n                    {voting && voting.votes && voting.votes[`${item.identifier}`] ? <Badge color=\"success\">voted</Badge> : (null)}\r\n                  </ListGroupItem>\r\n                )\r\n              })\r\n            }\r\n          </ListGroup>\r\n          {amILeader ? (\r\n            <div className=\"p-3\">\r\n              <Button className=\"btn btn-block\" color=\"success\" disabled={!voting || !quantityOfVotes} onClick={this.finishVoting}>Finish Voting</Button>\r\n              <Button className=\"btn btn-block\" color=\"danger\" outline disabled={!voting} onClick={this.cancelVoting.bind(this, voting ? voting.identifier : null, 0)}>Cancel Voting</Button>\r\n            </div>\r\n          ) : (\r\n              null\r\n            )}\r\n        </CardBody>\r\n      </Card>\r\n    )\r\n  }\r\n}\r\nclass Story extends React.Component {\r\n\r\n  componentWillMount = () => {\r\n    this.setState(this.props.state)\r\n  }\r\n\r\n  componentWillReceiveProps = () => {\r\n    this.setState(this.props.state)\r\n  }\r\n\r\n  getStatus = (status) => {\r\n    switch (status) {\r\n      case 0:\r\n        return { label: \"Ready\", color: \"primary\" }\r\n      case 2:\r\n        return { label: \"Voting\", color: \"warning\" }\r\n      case 3:\r\n      case 4:\r\n        return { label: \"Voted\", color: \"success\" }\r\n      case 9:\r\n        return { label: \"Closed\", color: \"secondary\" }\r\n    }\r\n  }\r\n\r\n  changeStatus = (storyId, status) => {\r\n    const { roomId } = this.state\r\n    const url = `api/room/${roomId}/story/${storyId}`\r\n\r\n    const requestOptions = {\r\n      method: 'PATCH',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ status: status })\r\n    }\r\n    fetch(url, requestOptions)\r\n  }\r\n\r\n  deleteStory = (storyId) => {\r\n    const { roomId } = this.state\r\n    const url = `api/room/${roomId}/story/${storyId}`\r\n\r\n    const requestOptions = {\r\n      method: 'DELETE',\r\n    }\r\n    fetch(url, requestOptions)\r\n  }\r\n\r\n  startVoting = async (storyId) => {\r\n    const { roomId } = this.state\r\n    const url = `api/room/${roomId}/vote/${storyId}/start`\r\n\r\n    const requestOptions = {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' }\r\n    }\r\n    fetch(url, requestOptions)\r\n  }\r\n\r\n  showResults = async (storyId) => {\r\n    const { roomId, results } = this.state\r\n\r\n    if (results && results.story.identifier == storyId)\r\n      return\r\n\r\n    const url = `api/room/${roomId}/vote/${storyId}/results`\r\n\r\n    const response = await fetch(url)\r\n    const result = await response.json()\r\n\r\n    this.setState({\r\n      ...this.state,\r\n      results: result,\r\n      points: result.story.points ? result.story.points : null\r\n    })\r\n  }\r\n\r\n  render = () => {\r\n    const { item } = this.props\r\n    const { leader, memberId, voting, results } = this.state\r\n    const amILeader = leader == memberId\r\n\r\n    return (\r\n      <ListGroupItem key={item.identifier} className=\"\" style={{ borderBottom: '1px solid lightgray' }}>\r\n        <Row>\r\n          <Col md={{ size: amILeader ? 8 : 12 }}>\r\n            {item.status != 9 ? (\r\n              <div className=\"h6\">\r\n                {item.title}\r\n              </div>\r\n            ) : (\r\n                <del className=\"font-italic\">{item.title}</del>\r\n              )}\r\n            <div>\r\n              <Badge color=\"info\" className=\"mr-1\">{item.points} pts</Badge>\r\n              <Badge color={this.getStatus(item.status).color} className=\"mr-1\">{this.getStatus(item.status).label}</Badge>\r\n            </div>\r\n          </Col>\r\n          {amILeader ? (\r\n            <Col md=\"4\" className=\"text-right\">\r\n              {item.status != 9 && item.status != 2 && !voting && !results && item.status != 3 && item.status != 4 ? <Button size=\"sm\" outline color=\"primary\" onClick={this.startVoting.bind(this, item.identifier)}>Vote</Button> : null}\r\n              {item.status == 3 && !voting ? <Button size=\"sm\" outline color=\"warning\" onClick={this.showResults.bind(this, item.identifier)}>Results</Button> : null}\r\n              {item.status != 9 && !(voting && voting.identifier == item.identifier) ? <Button size=\"sm\" outline color=\"secondary\" className=\"ml-1\" onClick={this.changeStatus.bind(this, item.identifier, 9)}>Close</Button> : null}\r\n              {item.status == 9 && !(voting && voting.identifier == item.identifier) ? <Button size=\"sm\" outline color=\"success\" className=\"ml-1\" onClick={this.changeStatus.bind(this, item.identifier, item.points > 0 ? 3 : 0)}>Reopen</Button> : null}\r\n              {!(voting && voting.identifier == item.identifier) ? <Button size=\"sm\" outline color=\"danger\" className=\"ml-1\" onClick={this.deleteStory.bind(this, item.identifier)}>Delete</Button> : null}\r\n            </Col>\r\n          ) : (null)}\r\n        </Row>\r\n      </ListGroupItem>\r\n    )\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport { Route } from 'react-router';\r\nimport { Layout } from './components/Layout';\r\nimport { Home } from './components/Home';\r\nimport { Room } from './components/Room';\r\n\r\nimport './custom.css'\r\n\r\nexport default class App extends Component {\r\n  static displayName = App.name;\r\n\r\n  render () {\r\n    return (\r\n      <Layout>\r\n        <Route exact path='/' component={Home} />\r\n        <Route exact path='/room/:roomId' component={Home} />\r\n        <Route exact path='/room/:roomId/:memberId' component={Room} />\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.1/8 is considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\nexport default function register () {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW (swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker (swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister () {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import 'bootstrap/dist/css/bootstrap.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nconst baseUrl = document.getElementsByTagName('base')[0].getAttribute('href');\r\nconst rootElement = document.getElementById('root');\r\n\r\nReactDOM.render(\r\n  <BrowserRouter basename={baseUrl}>\r\n    <App />\r\n  </BrowserRouter>,\r\n  rootElement);\r\n\r\nregisterServiceWorker();\r\n\r\n"],"sourceRoot":""}